 //calculate the branches and display the list of hashes until there is only one hash left 

      const rep = Math.ceil(Math.log2(this.txsCopy.length))

      for (let i = 0; i <= rep; i += 1) {
        if (this.hashedtxs.length == 1) {
          this.merkleRoot = this.hashedtxs[0]
          this.message = `The Merkle Root is ${this.merkleRoot}`
          console.log(this.message)
        } else if (this.branches.length == 1) {
          this.merkleRoot = this.branches[0]
          this.message = `The Merkle Root is ${this.merkleRoot}`
          console.log(this.message)
        } else if (this.hashedtxs.length > 1 && this.branches.length == 0) {
          this.hashedtxs.forEach((item, index) => {
            if (index % 2 == 0) {
              this.branches.push(
                sha256(sha256(this.hashedtxs[index].concat(this.hashedtxs[index + 1])))
              )
            }
          })
          this.message = `Branch: ${(this.branchCounter += 1)}`;
          console.log(this.message)
          //console.log(this.branches)
            this.allBranches.unshift(this.branches);
	 console.log(this.allBranches)
          if (this.branches.length > 1 && this.branches.length % 2 != 0) {
            this.makeElementsEven(this.branches)
            this.message = `Branch: ${(this.branchCounter += 1)}`;
            console.log(this.message)
            //console.log(this.branches)
            this.allBranches.unshift(this.branches);
console.log(this.allBranches)
          }
        } else if (this.branches.length > 0) {
          this.branchesCopy = Array.from(this.branches)
          this.branches = []
          this.branchesCopy.forEach((item, index) => {
            if (index % 2 == 0) {
              this.branches.push(
                sha256(sha256(this.branchesCopy[index].concat(this.branchesCopy[index + 1])))
              )
            }
          })
          this.message = `Branch: ${(this.branchCounter += 1)}`;
          console.log(this.message)  
          //console.log(this.branches)
          this.allBranches.unshift(this.branches);
console.log(this.allBranches)
          if (this.branches.length > 1 && this.branches.length % 2 != 0) {
            this.makeElementsEven(this.branches)
            this.message = `Branch: ${(this.branchCounter += 1)}`;
            console.log(this.message)  
            //console.log(this.branches)
            this.allBranches.unshift(this.branches);
console.log(this.allBranches)
          }
        }
      }
      this.message = `All the branches`;
      console.log(this.message)  
      console.log(this.allBranches)
